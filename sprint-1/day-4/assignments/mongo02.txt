1. Display all the documents in the collection restaurants
    db.restaurants.find()

2. Display the fields restaurant_id, name, borough, and cuisine for all the documents in the collection restaurants
    db.restaurants.find({}, {restaurant_id: 1, name: 1, borough: 1, cuisine: 1})

3. Display the fields restaurant_id, name, borough, and cuisine, but exclude the field _id for all the documents in the collection restaurants
    db.restaurants.find({}, {restaurant_id: 1, name: 1, borough: 1, cuisine: 1, _id: 0})

4. Display all the restaurant which is in the borough Bronx
    db.restaurants.find({borough: "Bronx"})

5. Display the first 5 restaurant which is in the borough Bronx
    db.restaurants.find({borough: "Bronx"}).limit(5)

6. Display the next 5 restaurants after skipping first 5 which are in the borough Bronx
    db.restaurants.find({borough: "Bronx"}).skip(5).limit(5)

7. Find the restaurants who achieved a score more than 90
    db.restaurants.find({"grades.score": {$gt: 90}})

8. Find the restaurants that achieved a score, more than 80 but less than 100
    db.restaurants.find({"grades.score": {$gt: 80, $lt: 100}})

9. Find the restaurants which locate in latitude value less than -95.754168
    db.restaurants.find({"address.coord.1": {$lt: -95.754168}})

10. Find the restaurants that do not prepare any cuisine of 'American' and their grade score more than 70 and latitude less than -65.754168
    db.restaurants.find({cuisine: {$ne: "American"}, "grades.score": {$gt: 70}, "address.coord.1": {$lt: -65.754168}})

11. Find the restaurants which do not prepare any cuisine of 'American' and achieved a score more than 70 and located in the longitude less than -65.754168. Note: Do this query without using $and operator.
    db.restaurants.find({cuisine: {$ne: "American"}, "grades.score": {$gt: 70}, "address.coord.0": {$lt: -65.754168}})

12. Find the restaurant Id, name, borough, and cuisine for those restaurants which contain 'Wil' as first three letters for its name
    db.restaurants.find({name: /^Wil/}, {restaurant_id: 1, name: 1, borough: 1, cuisine: 1})

13. Find the restaurant Id, name, borough, and cuisine for those restaurants which contain 'ces' as last three letters for its name
    db.restaurants.find({name: /ces$/}, {restaurant_id: 1, name: 1, borough: 1, cuisine: 1})

14. Find the restaurant Id, name, borough, and cuisine for those restaurants which contain 'Reg' as three letters somewhere in its name
    db.restaurants.find({name: /Reg/}, {restaurant_id: 1, name: 1, borough: 1, cuisine: 1})

15. Arrange the name of the restaurants in ascending order along with all the columns
    db.restaurants.find().sort({name: 1})

16. Arrange the name of the cuisine in ascending order and for that same cuisine borough should be in descending order
    db.restaurants.find().sort({cuisine: 1, borough: -1})
